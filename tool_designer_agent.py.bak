import logging
from typing import Union, Dict, Any, Optional
import os
from typing import Optional

# --- Jinja2 Import ---
import jinja2

# Mapping from spec type strings to Python types
TYPE_MAP = {
    'integer': 'int',
    'string': 'str',
    'float': 'float',
    'boolean': 'bool',
    'any': 'Any'
}

# --- Import base Agent, handling potential unavailability ---
try:
    from agents import Agent
except ImportError:
    logging.warning("Failed to import 'Agent' from agents library. Using placeholder.")
    class Agent:
        def __init__(self, *args, **kwargs): pass
        async def run(self, *args, **kwargs): return {"error": "Base Agent class not available"}

from meta_agent.parsers.tool_spec_parser import ToolSpecificationParser
from meta_agent.generators.tool_code_generator import ToolCodeGenerator, CodeGenerationError
from meta_agent.models.generated_tool import GeneratedTool
from meta_agent.template_engine import TemplateEngine

logger = logging.getLogger(__name__)

class ToolDesignerAgent(Agent): # Inherit from Agent
    """Orchestrates the process of parsing a tool specification and generating code."""

    def __init__(self, 
                 model_name: str = "o4-mini-high", 
                 template_dir: Optional[str] = None,
                 template_name: str = "tool_template.py.j2",
                 # template_engine: TemplateEngine = None # Deprecated
                 ):
        """Initializes the Tool Designer Agent.

        Args:
            model_name (str): The name of the language model to use (if needed, e.g., for future LLM generation).
            template_dir (Optional[str]): Path to the directory containing Jinja2 templates. 
                                         Defaults to '../templates' relative to this file.
            template_name (str): The name of the Jinja2 template file to use.
                                Defaults to 'tool_template.py.j2'.
        """
        super().__init__(name="ToolDesignerAgent", tools=[]) # Initialize base Agent with name
        self.model_name = model_name
        self.code_generator = ToolCodeGenerator(model_name=self.model_name)
        self.template_name = template_name

        # Determine template directory
        if template_dir is None:
            self.template_dir = os.path.join(os.path.dirname(__file__), '..', 'templates')
        else:
            self.template_dir = template_dir

        # --- Jinja2 Environment Setup ---
        # Use self.template_dir now
        self.jinja_env = jinja2.Environment(
            loader=jinja2.FileSystemLoader(self.template_dir),
            autoescape=jinja2.select_autoescape(['html', 'xml'])
        )
        logger.info(f"Jinja environment loaded from: {self.template_dir}")

    def design_tool(self, specification: Union[str, Dict[str, Any]]) -> str:
        """Parses the specification and generates tool code using a Jinja2 template."""
        try:
            # 1. Parse the specification
            parsed_spec = self.parser.parse(specification)
            logger.info(f"Successfully parsed tool specification for: {parsed_spec.name}")

            # 1.1. Map types to Python equivalents
            for param in parsed_spec.input_parameters:
                lower = param.type_.lower()
                param.type_ = TYPE_MAP.get(lower, param.type_)
            # Map output_format
            out_lower = parsed_spec.output_format.lower()
            parsed_spec.output_format = TYPE_MAP.get(out_lower, parsed_spec.output_format)

            # 2. Load the configured template
            try:
                # Use self.template_name now
                template = self.jinja_env.get_template(self.template_name)
                logger.debug(f"Loaded template: {self.template_name}")
            except jinja2.TemplateNotFound:
                logger.error(f"Tool template '{self.template_name}' not found in {self.template_dir}.")
                raise CodeGenerationError(f"Tool template '{self.template_name}' not found.")
            except Exception as e:
                logger.error(f"Error loading Jinja template: {e}", exc_info=True)
                raise CodeGenerationError(f"Failed to load template: {e}")

            # 3. Render the template with the specification data
            try:
                generated_code = template.render(spec=parsed_spec)
                logger.info(f"Successfully rendered template for tool: {parsed_spec.name}")
                return generated_code
            except Exception as e:
                logger.error(f"Error rendering Jinja template: {e}", exc_info=True)
                raise CodeGenerationError(f"Failed to render template: {e}")

        except Exception as e:
            # Catch unexpected errors during parsing or generation setup
            logger.exception("Unexpected error during tool design setup")
            # Wrap unexpected errors for consistency
            raise CodeGenerationError(f"Unexpected error in design_tool: {e}")

    async def run(self, specification: Dict[str, Any]) -> Dict[str, Any]:
        """Runs the full tool design workflow: research, parse, generate."""
        logger.info(f"ToolDesignerAgent received run request for: {specification.get('name', 'Unknown Tool')}")
        
        # Extract the actual specification content
        # Adjust this based on how the SubAgentManager passes the spec
        spec_content = specification # Assuming the dict *is* the spec for now
        if not spec_content:
             return {"status": "error", "error": "No specification provided to ToolDesignerAgent"}
        
        try:
            # 1. Research phase (placeholder)
            #    TODO: Integrate WebSearchTool or TemplateEngine
            logger.debug("Skipping research phase (TODO).")

            # 2. Parse and Generate Code (using existing synchronous method)
            #    We might make design_tool async later if needed.
            generated_code = self.design_tool(spec_content)
            logger.info("Code generation successful.")

            # 3. Generate Tests and Docs (placeholders)
            #    TODO: Implement test and doc generation (potentially further LLM calls)
            tests = "# TODO: Generate tests"
            docs = """# TODO: Generate documentation"""
            logger.debug("Using placeholder tests and docs.")
            
            # Return structure expected by manager (adjust as needed)
            result_tool = GeneratedTool(code=generated_code, tests=tests, docs=docs)
            return {
                "status": "success",
                "output": result_tool.model_dump() # Serialize the GeneratedTool object
            }

        except (ValueError, CodeGenerationError) as e:
            logger.error(f"Tool design failed: {e}", exc_info=True)
            return {"status": "error", "error": str(e)}
        except Exception as e:
            logger.exception("Unexpected error in ToolDesignerAgent run")
            return {"status": "error", "error": f"Unexpected error: {e}"}

# Example Usage (for interactive testing)
if __name__ == '__main__':
    # Example YAML spec (ensure valid paths if loading from file)
    example_yaml_spec = '''
    name: greet_user
    purpose: Greets the user by name.
    input_parameters:
      - name: user_name
        type: string
        description: The name of the user to greet.
        required: true
    output_format: string
    '''

    agent = ToolDesignerAgent()

    try:
        print("--- Designing Tool from YAML Spec ---")
        generated_code = agent.design_tool(example_yaml_spec)
        print("\n--- Generated Code --- \n")
        print(generated_code)
        print("\n--- End Generated Code ---")
    except (ValueError, CodeGenerationError) as e:
        print(f"\n--- Error Designing Tool --- \n{e}")

    # Example Invalid Spec
    invalid_spec = '{"name": "bad_tool"}' # Missing purpose, output_format
    try:
        print("\n--- Designing Tool from Invalid Spec ---")
        generated_code_invalid = agent.design_tool(invalid_spec)
        print("Generated code unexpectedly:", generated_code_invalid)
    except (ValueError, CodeGenerationError) as e:
        print(f"\n--- Error Designing Tool (Expected) --- \n{e}")
