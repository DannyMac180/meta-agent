# Task ID: 9
# Title: Create Template and Pattern Library
# Status: done
# Dependencies: 7
# Priority: low
# Description: Build a library of reusable agent templates and patterns to improve generation quality and consistency.
# Details:
1. Design template storage format (JSON/YAML) with separate retrieval index
2. Create initial set of agent archetypes with rich metadata
3. Implement embedding-based template search with compatibility filtering
4. Add template versioning, metadata, and checksums for integrity
5. Create template selection logic based on specifications
6. Implement template mixing for complex requirements
7. Add user-defined template support with governance controls
8. Ensure early 'hello-world' template availability for Phase 0-2

# Test Strategy:
Test template retrieval with various specifications. Verify template mixing produces valid results. Test with intentionally vague specifications to ensure appropriate templates are selected. Validate index rebuilding from source of truth. Test template signing and verification process.

# Subtasks:
## 1. Design template categorization schema [done]
### Dependencies: None
### Description: Create a hierarchical categorization system for organizing templates by type, purpose, and complexity
### Details:
Define primary template categories (e.g., conversation, reasoning, creative), subcategories, and metadata fields needed for each template. Create a document outlining the schema with examples of how different templates would be classified.

## 2. Implement template versioning system [done]
### Dependencies: 9.1
### Description: Develop a versioning mechanism to track template changes and maintain backward compatibility
### Details:
Design version numbering scheme (semantic versioning), implement storage of template history, create diff visualization between versions, and ensure templates can be rolled back to previous versions when needed.

## 3. Build template search functionality [done]
### Dependencies: 9.2
### Description: Create a robust search system allowing users to find templates by keywords, categories, and metadata
### Details:
Implement full-text search across template content and metadata, add filtering by category/tags, and create a relevance ranking algorithm. Include search result previews and sorting options.

## 4. Develop user-defined template creation interface [done]
### Dependencies: 9.1, 9.2
### Description: Create a user interface for defining and saving custom templates
### Details:
Design a template editor with syntax highlighting, variable definition, documentation fields, and validation. Include template testing capabilities and a guided creation wizard for new users.

## 5. Implement template mixing/inheritance system [done]
### Dependencies: 9.2, 9.4
### Description: Create functionality to combine multiple templates or inherit properties from base templates
### Details:
Design a template composition system allowing templates to reference or extend others. Implement conflict resolution for overlapping instructions, variable scope management, and visual representation of template relationships.

## 6. Create template validation and testing framework [done]
### Dependencies: 9.4, 9.5
### Description: Build tools to validate templates and test their effectiveness
### Details:
Implement syntax checking, variable usage validation, and performance testing for templates. Create a sandbox environment for testing templates with sample inputs and expected outputs.
<info added on 2025-05-28T01:12:33.581Z>
For the template validation and testing framework, create a 'golden-spec fuzz set' consisting of 20-30 intentionally vague specifications. This set will be used to regression-test the template selection logic.
</info added on 2025-05-28T01:12:33.581Z>

## 7. Develop template sharing and collaboration features [done]
### Dependencies: 9.4
### Description: Add functionality for users to share, collaborate on, and rate templates
### Details:
Implement template export/import, sharing permissions, collaborative editing, version merging, and a rating/review system. Create a community showcase for popular templates with usage statistics.

## 8. Implement storage-vs-index architecture [done]
### Dependencies: 9.1
### Description: Create a system that separates version-controlled template storage from retrieval index
### Details:
Design and implement a system where JSON/YAML files serve as the source of truth for templates, while a separate Chroma index enables efficient retrieval. Add checksums to detect drift and implement automatic index rebuilding when source files change.

## 9. Define and implement rich metadata schema [done]
### Dependencies: 9.1
### Description: Ensure templates include comprehensive metadata for smart selection and governance
### Details:
Implement required metadata fields including title, description, intended_use, io_contract, tools[], guardrails[], model_pref, complexity, created_by, semver, last_test_passed. Add optional fields like eval_score, cost_estimate, tokens_per_run to support intelligent template selection and mixing.

## 10. Develop template governance system [done]
### Dependencies: 9.6
### Description: Create signing, verification, and linting processes for templates
### Details:
Implement template signing with sha256 signatures, JSON-Schema validation, and Ruff linting. Create a sandbox environment for running unsigned templates and a caching mechanism for signed templates. Design a clear trust model for template verification.

## 11. Add provider compatibility tracking [done]
### Dependencies: 9.1
### Description: Implement system to track and filter templates based on provider capabilities
### Details:
Add provider compatibility flags to templates (e.g., requires_structured_outputs, requires_web_search). Enhance the template selection engine to filter out incompatible matches based on available capabilities in the runtime environment.

## 12. Create early 'hello-world' template [done]
### Dependencies: None
### Description: Develop a simple starter template that can be used in early phases
### Details:
Design and implement a minimal but functional 'hello-world' template that can be used in Phases 0-2, before the full template library is available. Ensure this template follows the basic metadata structure but doesn't depend on the complete template system being in place.

## 13. Template security & license scan [done]
### Dependencies: 9.2, 9.4
### Description: Flag templates that import non-permissive licenses or run shell commands.
### Details:
Implement a scanning mechanism to analyze template dependencies for non-permissive licenses (e.g., GPL, AGPL if the project aims for MIT/Apache). Detect and flag any templates that include direct shell command execution capabilities, as these pose a security risk. Integrate this scan into the template validation and publishing workflow.

## 14. Embedding model selection & benchmarking [done]
### Dependencies: 9.1
### Description: Measure retrieval quality vs cost for OpenAI text-embedding-3-small vs local all-MiniLM-L6 etc.; choose default, allow override.
### Details:
Conduct a benchmark study comparing various embedding models (e.g., OpenAI's text-embedding-3-small, text-embedding-3-large, and local models like all-MiniLM-L6-v2, GTE-large) for template retrieval. Evaluate based on retrieval accuracy (e.g., recall@k, MRR), indexing time, inference speed, and cost. Based on the findings, select a default embedding model for the template search and allow users to override this choice if needed. Document the benchmarking process and results.

## 15. CLI + API integration for templates [done]
### Dependencies: 9.3
### Description: Extend meta-agent init --template <slug> and expose /templates/search REST endpoint.
### Details:
Integrate template functionality into the CLI: allow users to initialize a new meta-agent project using a specific template via `meta-agent init --template <template_slug_or_id>`. Develop and expose a REST API endpoint (e.g., `/api/v1/templates/search`) that allows searching for templates. This endpoint will be crucial for future SaaS offerings and third-party integrations.

## 16. Automated docs generation for templates [done]
### Dependencies: 9.3, 9.6
### Description: Generate a Markdown card (name, description, sample invocation) for each template.
### Details:
Develop a system to automatically generate a Markdown documentation card for each template. This card should include key information like template name, description, intended use, I/O contract, tools used, guardrails, and a sample invocation or usage example. These cards can be used for an online template gallery or integrated into a VS Code extension for easy browsing.

